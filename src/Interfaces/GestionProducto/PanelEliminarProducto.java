/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interfaces.GestionProducto;

import Manejadores.ManejadorGestionProducto.ManejadorProducto;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luis
 */
public class PanelEliminarProducto extends javax.swing.JPanel {

    private ManejadorProducto DB;
    private int filasP;
    private DefaultTableModel dtmProductos = new DefaultTableModel();
    
    
    
    public PanelEliminarProducto() {
        DB = new ManejadorProducto();
        initComponents();
        mostrarTabla(filasP, dtmProductos, tablaProducto, "producto");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSalir = new javax.swing.JButton();
        btnEliminarProducto = new javax.swing.JButton();
        lblEliminar = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();

        btnSalir.setText("SALIR");

        btnEliminarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        btnEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProductoActionPerformed(evt);
            }
        });

        lblEliminar.setText("ELIMINAR PRODUCTO:");

        tablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_PRODUCTO", "NOMBRE", "PRECIO", "STOCK", "ID_PROVEEDOR"
            }
        ));
        jScrollPane3.setViewportView(tablaProducto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(825, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEliminarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEliminar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(174, 174, 174)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(77, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(lblEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(359, 359, 359)
                .addComponent(btnSalir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(119, 119, 119)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(62, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProductoActionPerformed
        // TODO add your handling code here:

        String id=JOptionPane.showInputDialog(null,"Ingrese el ID de la Instalación a Eliminar");
         int resultado = DB.borrarProducto(id);
        if(resultado==1){
            JOptionPane.showMessageDialog(this, "Se elimino exitosamente");
            
            cargarDatos(filasP, dtmProductos, "producto");
            
            
        }else{
            JOptionPane.showMessageDialog(this, "No se elimino");
        }
    
    }//GEN-LAST:event_btnEliminarProductoActionPerformed

    /*
    public void cargarDDatos2(){
        
        try{
            filasP=dtmProductos.getRowCount();
            for(int i =filasP-1;i>=0;i--){
                dtmProductos.removeRow(i);
            }
            CallableStatement cts = DB.getDbConection().getConexion().prepareCall("SELECT*FROM producto");
            ResultSet r = cts.executeQuery();
            
            while(r.next()){
                Object dato[] = new Object[5];
                for(int i=0; i < 5;i++){
                    dato[i]=r.getString(i+1);
                }
                dtmProductos.addRow(dato);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }*/
    
    public void mostrarTabla(int filasT,DefaultTableModel modeltabla,JTable Jtabla,String nombreTabla){
        filasT = modeltabla.getRowCount();
        ArrayList<String> nombreCampos = new ArrayList<>();
        try{
            CallableStatement cts = DB.getDbConection().getConexion().prepareCall("SHOW COLUMNS FROM "+nombreTabla);
            ResultSet r = cts.executeQuery();
            while(r.next()==true){
                nombreCampos.add(r.getString("Field"));
                System.out.println(""+r.getString("Field"));
            }
        }catch(Exception e){e.printStackTrace();}
        for(int i=filasT-1;i>=0;i--){modeltabla.removeRow(i);}
        for (String campo : nombreCampos) {modeltabla.addColumn(campo);}  
        Jtabla.setModel(modeltabla);
        cargarDatos(filasT,modeltabla,nombreTabla);
    }
    
    public void cargarDatos(int filasE,DefaultTableModel modeltabla,String nombreTabla){
        //INICIALIZAMOS UN TAMAÑO DE COLUMNAS
        int tamanioColumnas=0;
        try{
            //CONSULTA QUE NOS DICE CUANTAS COLUMNAS TIENE NUESTRA TABLA                                                                                                                                      //NOMBRE DE LA BASE DE DATOS
            CallableStatement cts = DB.getDbConection().getConexion().prepareCall("SELECT TABLE_NAME, count( COLUMN_NAME ) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = '"+nombreTabla+"' AND table_schema = 'sql9556799';");
            ResultSet r = cts.executeQuery();
            while(r.next()){
                //OBTENEMOS EL TOTAL DE COLUMNAS
                    tamanioColumnas = r.getInt(2);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
        try{
            //REINICIAMOS LOS DATOS DE LA TABLA
            filasE=modeltabla.getRowCount();
            for(int i =filasE-1;i>=0;i--){
                modeltabla.removeRow(i);
            }
            //CONSULTA CON LA QUE OBTENEMOS LOS DATOS DE LA TABLA
            CallableStatement cts = DB.getDbConection().getConexion().prepareCall("SELECT * FROM "+nombreTabla);
            ResultSet r = cts.executeQuery();
            
            //PROCESO DE ACCESO Y SUBIDA DE DATOS EN LA TABLA
            while(r.next()){
                Object dato[] = new Object[tamanioColumnas];
                for(int i=0; i < tamanioColumnas;i++){
                    dato[i]=r.getString(i+1);
                }
                modeltabla.addRow(dato);
            }
        }catch(Exception e){
            e.printStackTrace();
}
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarProducto;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblEliminar;
    private javax.swing.JTable tablaProducto;
    // End of variables declaration//GEN-END:variables
}
